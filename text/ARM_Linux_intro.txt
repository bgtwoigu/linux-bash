    本文由wuwenfeng09贡献
    doc文档可能在WAP端浏览体验不佳。建议您优先选择TXT，或下载源文件到本机查看。
    由于很多人总问这个问题，所以这里做一个总结文档供大家参考。这里必须先说明，以下的步骤 都是针对 Linux 系统的，并不面向 WinCE。也许你会注意到，现在做嵌入式的人中，做 linux 研究 的人远比做 WinCE 的人多，很多产家提供的资料也是以 linux 为主。我一直很难理解，其实 WinCE 的界面比 linux 的界面好看多了，使用起来也很方便，更为重要的是，WinCE 的开发和 Windows 下 的开发基本一样，学起来简单得多，但是学 linux 或者使用 linux 做嵌入式的人就是远比 WinCE 多。 在和很多工作的人交流时我了解到，他们公司从没考虑使用 WinCE，因为成本高，都是使用 linux 进行开发。我读研究生的的实验室中也没有使用 WinCE 的，大都研究 linux，也有少部分项目使用 vxwork，但是就没有听说过使用 WinCE 的，原因就是开源！当然现在 WinCE6.0 听说也开源，不过 在成本和资源上 linux 已经有了无人能挡的优势。与此相对应的是，越来越多的电子厂商已经开始使 用 linux 开发产品。举个例子，Google 近期开发的智能手机操作系统 Android 其实就是使用 linux-2.6.23 内核进行改进得到的。 第一，学习基本的裸机编程。 对于学硬件的人而言，必须先对硬件的基本使用方法有感性的认识，更必须深刻认识该硬件的控制方 式，如果一开始就学 linux 系统、学移植那么只会马上就陷入一个很深的漩涡。我在刚刚开始学 ARM 的时候是选择 ARM7 （主意是当时 ARM9 还很贵） 学 ARM7 的时候还是保持着学 51 单片机的思维， ， 使用 ADS 去编程，第一个实验就是控制 led。学过一段时间 ARM 的人都会笑这样很笨，实际上也不 是，我倒是觉得有这个过程会好很多，因为无论做多复杂的系统最终都会落实到这些最底层的硬件控 制，因此对这些硬件的控制有了感性的认识就好很多了 学习裸机的编程的同时要好好理解这个硬件的构架、控制原理，这些我称他为理解硬件。所谓的理解 硬件就是说， 理解这个硬件是怎么组织这么多资源的， 这些资源又是怎么由 cpu、 由编程进行控制的。 比如说，s3c2410 中有 AD 转换器，有 GPIO（通用 IO 口），还有 nandflash 控制器，这些东西都有 一些寄存器来控制，这些寄存器都有一个地址，那么这些地址是什么意思？又怎么通过寄存器来控制 这些外围设备的运转？还有，norflash 内部的每一个单元在这个芯片的内存中都有一个相应的地址单 元，那么这些地址与刚刚说的寄存器地址又有什么关系？他们是一样的吗？而与 norflash 相对应的 nandflash 内部的储存单元并不是线性排放的，那么 s3c2410 怎么将 nandflash 的地址映射在内存空 间上进行使用？或者简单地说应该怎么用 nandflash？再有，使用 ADS 进对 ARM9 行编程时都需要 使用到一个初始化的汇编文件，这个文件究竟有什么用？他里面的代码是什么意思？不要这个可以 吗？ 诸如此类都是对硬件的理解，理解了这些东西就对硬件有很深的理解了，这对以后更深一步的学习将 有很大的帮助，如果跳过这一步，我相信越往后学越会觉得迷茫，越觉得这写东西深不可测。因为， 你的根基没打好。 不过先声明一下，本人并没有使用 ADS 对 ARM9 进行编程，我是学完 ARM7 后直接就使用 ARM9 学 linux 系统的，因此涉及使用 ADS 对 ARM9 进行编程的问题我很难回答^_^，自己去研究研究吧。 对于这部分不久将提供一份教程，这个教程中的例程并不是我为我们所代理的板子写的，是我在我们 学院实验室拿的，英培特为他们自己 的实验箱写的，不过很有借鉴意义，可以作为一份有价值的参 考。 第二，使用 linux 系统进行一些基本的实验。 在买一套板子的时候一般会提供一些 linux 的试验例程，好好做一段时间这个吧，这个过程也是 很有意义的，也是为进一步的学习积累感性认识，你能想象一个从没有使用过 linux 系统的人能学好 linux 的编程吗？好好按照手册上的例程做一做里面的实验，虽然有点娃娃学走路，有点弱智，但是 我想很多高手都会经历这个过程。 在这方面我们深蓝科技目前没有计划提供相应的例程， 主要是开发板的提供商会提供很丰富的例 程，我们不做重复工作，只提供他们没有的、最有价值的东西给大家。 第三，研究完整的 linux 系统的的运行过程。
    所谓完整的 linux 系统包括哪些部分呢？ 三部分：bootloader、linux kernel（linux 内核）、rootfile（根文件系统）。 那么这 3 部分是怎么相互协作来构成这个系统的呢？各自有什么用呢？三者有什么联系？怎么联 系？系统的执行流程又是怎么样的呢？搞清楚这个问题你对整个系统的运行就很清楚了， 对于下一步 制作这个 linux 系统就打下了另一个重要的根基。介绍这方面的资料网上可以挖掘到几吨，自己好好 研究吧。 第四，开始做系统移植。 上面说到完整的 linux 有 3 部分，而且你也知道了他们之间的关系和作用，那么现在你要做的便是自 己动手学会制作这些东西。 当然我不可能叫你编写这些代码，这不实现。事实上这个 3 者都能在网下载到相应的源代码，但是这 个源代码不可能下载编译后就能在你的系统上运行，需要很多的修改，直到他能运行在你的板子上， 这个修改的过程就叫移植。在进行移植的过程中你要学的东西很多，要懂的相关知识也很多，等你完 成了这个过程你会发现你已经算是一个初出茅庐的高手了。 在这个过程中如果你很有研究精神的话你必然会想到看源代码。 很多书介绍你怎么阅读 linux 源代码， 我不提倡无目的地去看 linux 源代码，用许三多的话说，这没有意义。等你在做移植的时候你觉得你 必须去看源代码时再去找基本好书看看，这里我推荐一本好书倪继利的《linux 内核的分析与编程》， 这是一本针对 linux-2.6.11 内核的书，说得很深，建议先提高自己的 C 语言编程水平再去看。 至于每个部分的移植网上也可以找到好多吨的资料，自己研究研究吧，不过要提醒的是，很多介绍自 己经验的东西都或多或少有所保留，你按照他说的去做总有一些问题，但是他不会告诉你怎么解决， 这时就要靠自己，如果自己都靠不住就找我一起研究研究吧，我也不能保证能解决你的问题，因为我 未必遇到过你的问题，不过我相信能给你一点建议，也许有助你解决问题。 这一步的最终目的是，从源代码的官方主页上（都是外国的，悲哀）下载标准的源代码包，然后进行 修改，最终运行在板子上。 盗用阿基米德的一句话：“给我一根网线，我能将 linux 搞定”。 第五，研究 linux 驱动程序的编写。 移植系统并不是最终的目的，最终的目的是开发产品，做项目，这些都要进行驱动程序的开发。 Linux 的驱动程序可以说是五花八门， linux2.4 和 linux2.6 的编写有相当大的区别， 就是同为 linux2.6 但是不同版本间的驱动程序也有区别，因此编写 linux 的驱动程序变都不是那么容易的事情，对于最 新版本的驱动程序的编写甚至还没有足够的参考资料。那么我的建议就是使用、移植一个不算很新的 版本内核，这样到时学驱动的编程就有足够的资料了。 这部分的推荐书籍可以参考另一篇文章《推荐几本学习嵌入式 linux 的书籍》。 第六，研究应用程序的编写。 做作品做项目除了编写驱动程序，最后还要编写应用程序。现在的趋势是图形应用程序的开发，而图 形应用程序中用得最多的还是 qt/e 函数库。我一直就使用这个函数库来开发自己的应用程序，不过 我希望你能使用国产的 MiniGUI 函数库。盗用周杰伦的广告词就是“支持国产，支持 MiniGUI”。 MiniGUI 的编程比较相似 Windows 下的 VC 编程，比较容易上手，效果应该说是相当不错的，我曾 使用过来开发 ARM7 的程序。不过 MiniGUI 最大的不好就是没有像 qtopia 这样的图形操作平台，这 大大限制了他的推广，我曾经幻想过与北京飞漫公司（就是 MiniGUI 的版权拥有者）合作使用 MiniGUI 函数库开发像 qtopia 这样的图形操作平台，不过由于水平有限这只能是幻想了，呵呵。 完成这一步你基本就学完了嵌入式 linux 的全部内容了。 还有一个小小的经验想和大家分享。我在学习嵌入式 linux 的过程中很少问人，客观原因是身边的老 师、同学师兄都没有这方面的高手，主观原因是我不喜欢问人，喜欢自己研究解决问题。这样做有个 好处，就是可以提高自己解决问题的能力，因为做这些东西总有很多问题你难以理解，别人也没有这 方面的经验，也不是所有问题都有人给你答案，这时必须要自己解决问题，这样，个人的解决问题能
    力就显得非常关键了。 因此我的建议就是一般的问题到网上搜索一下， 确实找不到答案了就问问高手， 还是不行了就自己去研究，不要一味去等别人帮你解决问题。 记住，问题是学习的最好机会。
    就嵌入式系统的设计和实现而言，基本上需要四种不同的工作：系统设计工作，硬件设计工作，驱动 程式和操作系统移植工作和应用程式设计研发工作。 系统设计工作 在系统的设计阶段，系统分析师将根据需求确定系统的硬件的基本构成，根据系统的需求选择使用那 种处理器，使用哪种操作系统，使用那些软件研发工具。系统分析师往往是较为完整的参和过嵌入式 系统设计的全过程，对于系统应用的行业较为了解，对于嵌入式系统本身的研发流程十分清晰的人。 硬件设计工作 系统硬件设计人员需要根据系统分析师的设计结果，进行硬件原理图的设计。通常需要硬件设计人员 熟悉嵌入式系统的硬件构成。硬件设计人员需要了解常用的嵌入式系统处理器，存储器（Flash，S DRAM），以太网 MAC 芯片，音频/ 视频编解码芯片，电源管理芯片，总线接口电路 (USB, PCI)， 液晶显示模块，可编程逻辑器件(FPGA/CPLD)，无线网络通信模块(Bluetooth, WLAN,GPRS)等 硬件电路构成元素的基本工作原理，连接使用方法，使用注意事项，基本调试方法等内容。在网络上 能找到非常多公司的评估板的原理图，对于这些原理图要仔细研究，摸清处理器同存储器，网卡，液 晶模块等器件的连接方法和原因。通过对这些电路的研究，能够较快地了解整个嵌入式系统的构成， 这些电路同实际产品中的电路虽有一定差别的，特别是对于手持设备，但这些差别不影响初学者学习 嵌入式系统的硬件设计基本构成。 以上这些知识，往往需要较长时间的学习和积累，需要亲自参和实践的机会。对于刚刚接触嵌入式系 统硬件研发的学生来讲，一般不可能全部了解这些知识，但也不会是通通一无所知。笔者结合自己研 发和教学的经验认为：首先应该选定一款主流且较为简单的嵌入式系统处理器，比如基于 ARM7TD MI 内核的 AT91M40800,S3C44B0 等嵌入式系统处理器，学习 32 位 RISC 处理器的编程模型， 指令集。高校教学中，单片计算机课程一般以 8051 系列单片为核心讲解，由于现代 32 位处理器的 结构和研发方式同 8 位单片机有着较大的差别，学习者还是需要花一点力气来研究以下 32 位处理 器的。以 ARM 处理器为例，学习者就需要理解处理器的多种工作模式，备份寄存器，RISC 指令集 的特点，MMU 和虚拟地址，中断处理过程等内容。在学习指令集的过程中，最佳能够每学习几条指 令，就使用这几条指令在模拟器上实验以下，观察处理器执行的结果。这个过程一方面是学习者对于 指令本身的学习能够取得一个比较好的效果，另外也是对研发工具本身的一种学习。接着，就能开始 学习片上资源的使用和设置方法。这时就需要一个方便使用的研发板，学习者能够通过 JTAG 仿真 器将研发板同调试 PC 机相连，进行程式的下载，调试。特别是要仔细研究系统的初始化过程和中断 处理的过程。在研发过程中如果遇见问题，应自己分析问题产生的原因，通过分析缩小问题可能产生
    的范围，最终找到问题的所在。最重要的就是要保持一种解决问题的信心，面对困难怎么处理，往往 能够决定最终系统是否能够调试成功。然后，学习者能开始仔细学习处理器同存储器的连接，存储空 间的设置，各种外扩器件，如网卡，AC97 声卡的工作原理和使用方法。 嵌入式系统硬件设计中往往需要使用可编程器件， 学习者还需要一定的时间来学习使用常用的可编程 器件（C P L D / F P G A ），常用的有 Xilinx 和 Altera 公司的产品。进行系统硬件原理图设计， 就需要使用原理图设计的 E D A 工具，常用的 E D A 原理图设计工具主要包括 Cadence 公司的 Capture，Protel 公司的 Protel99 SE 等。接下来就能参照评估板的电路图，根据系统的设计需求， 开始进行原理图的绘制了。在原理图绘制过程中，一定要搞清评估板电路连接的原因，对于一时没有 搞清晰的问题切不可蒙混过关。例如，有些处理器的地址线是以字节位单位的，而另一些处理器的地 址线则是以两个字节为单位的，当连接 16 位的存储器的时候，切不可想当然的把处理器的 A 0 直 接连接到存储器的 A 0 上面。 常用嵌入式系统处理器和操作系统 处理器 常用嵌入式系统处理器主要包括 ARM 处理器，Power PC 处理器，基于 MIPS 内核的嵌入式处理 器，软核处理器（如 Alter 的 Nios 和 Xilinx 的 MicroBlaze 等）和 D S P（数字信号处理器）等。 A R M 处理器的主要特点是具有较高的性能功耗比。A R M 处理器被广泛的应用在手机，P D A 等领域，其中较为著名的有 Intel 公司生产的基于 ARM 内核的 XScale 系列处理器。由于所有公司 生产的基于 ARM 内核的处理器具有相同的编程模型，在手持和电池供电的系统中，基于 A R M 的 嵌入式系统处理器往往被首先选用。PowerPC （简称 PPC）处理器具有较强的运算性能和数据吞吐 能力，在网络和数据通信领域基于 PPC 的嵌入式系统处理器有着广泛的应用。其中 Motorola 公司 生产的 MPC860/MPC8260 被大量地应用在嵌入式网络产品中。 MIPS 处理器的特点表目前十分强大的处理能力上。作为高性能处理器，MIPS 处理器适用于网络、 企业及高级消费类电子应用，特别是在机顶盒系统中，MIPS 处理器具有较高的市场占有率。随着可 编程器件的规模不断扩大，使得人们能够根据需要制定处理器，并方便的将针对某种特别应用制定的 处理器方便的在可编程器件内部实现。除了处理器外，计算机系统还需要许多其他构成部分，比如在 多通道媒体数据处理系统中，经常需要使用可编程器件来实现高速的数据处理功能，使用软核 DSP 来实现复杂的数字信号处理算法，同时还需要处理器进行事务处理，软核处理器将可编程器件，D S P 同处理器结合在一起，为系统级设计提供了极大的灵活性。 DSP（数字信号处理器）有别于通用处理器，集中表目前其强大的数字信号处理能力上。在 DSP 内 部提供了硬件乘累加器，处理器在设计上对于特别的寻址方式做了优化，一些 DSP 还支持零耗循环 （Zero OverheadLoop）。为了方便嵌入式系统设计，主流 DSP 一般也都提供了丰富的外设。特 别值得一提的是 A D I 公司的 Blackfin 系列 DSP 和 TI 公司的 DM64X 系列 DSP，两种处理器 都提供了丰富的片上外设，非常适用嵌入式系统应用。
    嵌入式系统研发过程中的常见问题和解决方法 Bootloader 怎么写入 Flash ？ 初学者一般都会遇见怎么将程式写入处理器的问题。对于不同的处理器，能采用不同的方法。例如 I ntel 的 Xscale 处理器能使用 Intel 公司提供的 JFlash 工具烧写。对于具有 JTAG （joint test ac tion group 联合测试行动小组）调试工具软件的处理器，能使用如下思路：编写一段程式，这段程 式能将位于 SDRAM/S.RAM 固定地址中的数据写入 Flash 中。烧写时，首先，将这段软件下载到 SDRAM 中，然后通过调试软件将要写入 Flash 的数据下载到 S D R A M / S R A M 的某个固 定地址开始的缓冲区，然后通过调试器开始执行程式，将数据写入 Flash。除此以外，网络上还提供 了非常多专用的写 Flash 的工具，研发者能根据自己的需要选用。(目前明白了我在学的那个 BF533 为什么先下个 flashProgramer.dxe 先了) 什么是 arm-elf-gcc？ arm -elf-gcc 是个交叉 C 语言编译器。我们在 PC 平台下编译程式，编译器运行的处理器同生成的 代码将要运行的处理器相同。不过，在 PC 机上编译 ARM 程式时，编译器运行的处理器同生成的代 码运行的处理器不同，这种编译器叫做交叉编译器。其中的 elf 是指编译器生成的目标文件格式。(其 实我们平时用的单片机编译器如 GCC?AVR 等已是交叉编译器了，我到目前才弄清晰什么是交叉编 译器) 走了哪条编译路径？ 系统程式和驱动程式往往包含非常多的编译选项，非常多选项都是在编译时通过命令行定义的，如果 想知道编译的是那一段程式能使用如下的方法： #ifdef PLAT_AAA #error Code for Platform AAA #else #error Code NOT for Platform AAA #endif 这样在编译的时候就知道， 编译的是哪一条路经了。 对于支持#pragma message( “I am here”) 的编译器也可使用#pragma message 预编译指令。 我怎么知道那段代码在那个文件中？ 系统编程中经常需要使用在多个文件中搜索字符串，在 windows 平台下能使用平台提供的多文件字 符串搜索工具。在 linux 平台下，能使用 grep 来搜索字符串。Grep 的搜索功能十分强大，支持正 则表达式搜索，熟练使用 grep 对于阅读系统和驱动程式代码是非常有帮助的。 系统是从那个文件开始运行的？
    对于 W i n d o w s C E 系统，一般从 W I N C E 4 2 0 ＼PLATFORM＼YourPlatform＼K ERNEL＼HAL 目录的某个汇编文件中。对于 Linux 系统版本不同会存在一定差异，以 arm 处理器 为例，一般会在 linux2.4.x＼arch＼arm＼kernel 的 head-armv.S 中。 程式执行到了那里？ 能在程式中插入如下代码来实现 printf( “I am here %s, %d＼n”,__FILE__, __LINE__); 代码将打出 printf 语句所在的文件名和行号。 推荐书目
    Jean J.Labrosse MicroC/OS-II The Real-Time Kernel,Second Edition 这本书是笔者接触嵌入式实时系统的入门书，在国内能够买到中文版。这本书较为清晰地讲述了实时 系统的概念，各个组成部分的工作原理，特别是公开了实时系统内核的原始码，仔细研究定会受益匪 浅。有个小的提示，对于初学者，这本书能先不看第一章，直接从第二章看起。
    Abraham Silberschatz, Peter Baer Galvin,Greg Gagne Operating System Concepts 笔者在教学过程中发现， 无论是计算机还是电子工程专业都有非常多学生对于操作系统的基本概念都 没有搞清，非常少有学生有完整的系统编程经验。Operating SystemConcepts 这本书对操作系统 的感念讲述只能用经典来形容。对于嵌入式系统有兴趣深入研究的同学，首先要把基础打好，这本书 就成了必读之物了。
    Andrew S. Tanenbaum Computer Networks 提起 Andrew S. Tanenbaum 学习计算机的同学一定都知道 OPERATINGSYSTEMsesign and Implementation 这本书，笔者对于 Tanenbaum 这样的教授由衷佩服。网络协议栈是嵌入式系统 中的支柱性组成部分。 愿意致力于网络深层技术研究的同学， 这本书将你们建立一个坚实的网络基础。
    Karim Yaghmour Building Embedded Linux Systems 本书详尽的介绍了嵌入式 linux 系统的组成，基本概念和怎么去建立各个部分。全书篇幅较小，可谓 短小精悍。即能作为嵌入式 linux 系统的入门读物，又是研发过程各个部分的指南。 学习嵌入式系统不了解当前应用最广泛的嵌入式处理器怎么行？ ARM7 TDMI 的 data sheet 是 学习 ARM 编程模型，指令集的好东西。在嵌入式系统中，M M U （内存管理单元）是非常重要的 部分，又是较难理解和掌控的部分。ARM920T Technical Reference Manual 正好能帮你讲解这 方面的内容。
    Perter Van Der LinDen Expert C Programming 嵌入式系统级编程最常用的语言还是 C 。非常多同学都自认为自己的 C 语言学的非常好，那好，就 看看这本书吧，找找自己和 Experts 差距。
    这篇文章非常清晰的讲述了嵌入式研发的方方面面，对嵌入式开发学习人员起到的指导作用，嵌入式 研发和桌面研发既有不同，又有非常大的联系，而且十分注重实际操作能力。搞桌面研发的人在一开 始接触嵌入式的时候，通常转换不过来，这主要体目前定位上。如文中所说，你是谁，你要做什么？ 我对硬件的了解仅限于编程领域，PCB 设计一窍不通，但并不能说你不懂硬件就不能从事嵌入式研 发。一个系统的研发设计方方面面，在自己感兴趣和熟悉的领域做出自己的贡献才是最主要的。
    ? ?
    硬件设计: 需要有硬件设计的经验，对各种嵌入式器件有非常好的了解 系统移植：需要汇编经验，操作系统原理及底层驱动的了解 应用程式：需要桌面编程经验
    什么是嵌入式编程, 什么是嵌入式编程,什么是 ARM 如何学习 嵌入式系统是以应用为中心，以计算机技术为基础，并且软硬件可裁剪， 嵌入式系统是以应用为中心，以计算机技术为基础，并且软硬件可裁剪，适用于应用系统 对功能、可靠性、成本、体积、功耗有严格要求的专用计算机系统。它一般由嵌入式微处 对功能、可靠性、成本、体积、功耗有严格要求的专用计算机系统。它一般由嵌入式微处 理器、外围硬件设备、嵌入式操作系统以及用户的应用程序等四个部分组成， 程序等四个部分组成 理器、外围硬件设备、嵌入式操作系统以及用户的应用程序等四个部分组成，用于实现对 其他设备的控制、监视或管理等功能。 其他设备的控制、监视或管理等功能。 系统， 它包括硬件和软件两部分。 硬件包括处理器／微处理器、 嵌入式系统一般指非 PC 系统， 它包括硬件和软件两部分。 硬件包括处理器／微处理器、 端口、图形控制器等。软件部分包括操作系统软件（OS） （要求 存储器及外设器件和 I／O 端口、图形控制器等。软件部分包括操作系统软件（OS） 要求 （ 实时和多任务操作）和应用程序编程。有时设计人员把这两种软件组合在一起。 实时和多任务操作）和应用程序编程。有时设计人员把这两种软件组合在一起。应用程序 控制着系统的运作和行为；而操作系统控制着应用程序编程与硬件的交互作用。 控制着系统的运作和行为；而操作系统控制着应用程序编程与硬件的交互作用。 现在所说的嵌入式开发，通常都是指有嵌入式操作系统的那种，产品功能复杂了， 现在所说的嵌入式开发，通常都是指有嵌入式操作系统的那种，产品功能复杂了，单 片机开发无法实现，需要用到嵌入式操作系统，也能体现出嵌入式操作系统的优势。 片机开发无法实现，需要用到嵌入式操作系统，也能体现出嵌入式操作系统的优势。嵌入 式产品在航空、医疗、家电、消费电子、汽车电子、移动等众多领域都可以看到， 式产品在航空、医疗、家电、消费电子、汽车电子、移动等众多领域都可以看到，应用领 域极为广泛，所以现在嵌入式开发相当热门，并且具备非常好的发展前景！ 域极为广泛，所以现在嵌入式开发相当热门，并且具备非常好的发展前景！ ！ 嵌入式系统的核心是嵌入式微处理器。 个特点： 嵌入式系统的核心是嵌入式微处理器。嵌入式微处理器一般就具备以下 4 个特点： 对实时多任务有很强的支持能力，能完成多任务并且有较短的中断响应时间， 1）对实时多任务有很强的支持能力，能完成多任务并且有较短的中断响应时间，从而 使内部的代码和实时内核心的执行时间减少到最低限度。 使内部的代码和实时内核心的执行时间减少到最低限度。 具有功能很强的存储区保护功能。这是由于嵌入式系统的软件结构已模块化， 2）具有功能很强的存储区保护功能。这是由于嵌入式系统的软件结构已模块化，而为 了避免在软件模块之间出现错误的交叉作用 需要设计强大的存储区保护功能， 现错误的交叉作用， 了避免在软件模块之间出现错误的交叉作用，需要设计强大的存储区保护功能，同时也有 利于软件诊断。 利于软件诊断。 可扩展的处理器结构， 以能最迅速地开展出满足应用的最高性能的嵌入式微处理器。 3） 可扩展的处理器结构， 以能最迅速地开展出满足应用的最高性能的嵌入式微处理器。 嵌入式微处理器必须功耗很低， 4）嵌入式微处理器必须功耗很低，尤其是用于便携式的无线及移动的计算和通信设备 中靠电池供电的嵌入式系统更是如此， 甚至μ 中靠电池供电的嵌入式系统更是如此，如需要功耗只有 mW 甚至μW 级。 嵌入式计算机系统同通用型计算机系统相比具有以下特点： 嵌入式计算机系统同通用型计算机系统相比具有以下特点： 1.嵌入式系统通常是面向特定应用的嵌入式 1.嵌入式系统通常是面向特定应用的嵌入式 CPU 与通用型的最大不同就是嵌入式 CPU 大多工作在为特定用户群设计的系统中，它通常都具有低功耗 体积小、集成度高等特点， 具有低功耗、 大多工作在为特定用户群设计的系统中，它通常都具有低功耗、体积小、集成度高等特点， 中许多由板卡完成的任务集成在芯片内部， 能够把通用 CPU 中许多由板卡完成的任务集成在芯片内部，从而有利于嵌入式系统设计趋 于小型化，移动能力大大增强，跟网络的耦合也越来越紧密。 于小型化，移动能力大大增强，跟网络的耦合也越来越紧密。 2.嵌入式系统是将先进的计算机技术 嵌入式系统是将先进的计算机技术、 2.嵌入式系统是将先进的计算机技术、半导体技术和电子技术与各个行业的具体应用
    相结合后的产物。这一点就决定了它必然是一个技术密集、资金密集、高度分散、 相结合后的产物。这一点就决定了它必然是一个技术密集、资金密集、高度分散、不断创 新的知识集成系统。 新的知识集成系统。 3.嵌入式系统的硬件和软件都必须高效率地设计 量体裁衣、去除冗余， 嵌入式系统的硬件和软件都必须高效率地设计， 3.嵌入式系统的硬件和软件都必须高效率地设计，量体裁衣、去除冗余，力争在同样 的硅片面积上实现更高的性能，这样才能在具体应用中对处理器的选择更具有竞争力 争力。 的硅片面积上实现更高的性能，这样才能在具体应用中对处理器的选择更具有竞争力。 4.嵌入式系统和具体应用有机地结合在一起 它的升级换代也是和具体产品同步进行， 嵌入式系统和具体应用有机地结合在一起， 4.嵌入式系统和具体应用有机地结合在一起，它的升级换代也是和具体产品同步进行， 因此嵌入式系统产品一旦进入市场，具有较长的生命周期。 因此嵌入式系统产品一旦进入市场，具有较长的生命周期。 5.为了提高执行速度和系统可靠性 为了提高执行速度和系统可靠性， 5.为了提高执行速度和系统可靠性，嵌入式系统中的软件一般都固化在存储器芯片或 单片机本身中，而不是存贮于磁盘等载体中。 单片机本身中，而不是存贮于磁盘等载体中。 6.嵌入式系统本身不具备自举开发能力 嵌入式系统本身不具备自举开发能力， 6.嵌入式系统本身不具备自举开发能力，即使设计完成以后用户通常也是不能对其中 的程序功能进行修改的，必须有一套开发工具和环境才能进行开发! 的程序功能进行修改的，必须有一套开发工具和环境才能进行开发! ====================
    可以尝试以下路线： 可以尝试以下路线： 言是所有编程语言中的强者，单片机、dsp、 （1） c 语言是所有编程语言中的强者，单片机、dsp、类似 arm 的种种芯片的编程都可以 语言搞定） 因此必须非常熟练的掌握。 ，因此必须非常熟练的掌握 用 c 语言搞定） 因此必须非常熟练的掌握。 ， language》 这本经典的教材是老外写的，也有中译版本。 推荐书籍： 《 推荐书籍： the c programming language》 这本经典的教材是老外写的，也有中译版本。 操作系统原理，是必需的， 是计算机专业毕业那也就无所谓了， （2） 操作系统原理，是必需的，如果 是计算机专业毕业那也就无所谓了，如果是非计算 机专业的就必须找一本比较浅显的计算机原理书籍看一看，把啥叫“进程” 线程” “线程 “ “系统 机专业的就必须找一本比较浅显的计算机原理书籍看一看，把啥叫“进程” 线程” 系统 “ 调度”等等基本问题搞清楚。 调度”等等基本问题搞清楚。 语言编写的， 方面的编程， （ 3） （ 3） linux 操作系统就是用 c 语言编写的， 所以 也应该先学习下 linux 方面的编程， 会应用了，才能近一步去了解其内核的精髓。 只有 会应用了，才能近一步去了解其内核的精髓。 推荐书籍： 《unix 环境高级编程》 （第 推荐书籍： unix 环境高级编程》 第 2 版） 《 （ 的架构，原理，以及其汇编指令， 在嵌入式开发中，一般很少去写汇编， （4） 了解 arm 的架构，原理，以及其汇编指令， 在嵌入式开发中，一般很少去写汇编， 但是最起码的要求是能够看懂 汇编。 但是最起码的要求是能够看懂 arm 汇编。 系统移植的时候， 开始，然后内核移植， （5） 系统移植的时候，就需要 从最下层的 bootloader 开始，然后内核移植，文件系统 移植等。而移植这部分对硬件的依赖是非常大的，其配置步骤也相对复杂， 移植等。而移植这部分对硬件的依赖是非常大的，其配置步骤也相对复杂，也没有太多详 细资料。 细资料。 （6） 驱动开发 驱动程序设计既是个极富有挑战性的领域，又是一个博大精深的内容。 linux 驱动程序设计既是个极富有挑战性的领域，又是一个博大精深的内容。 驱动程序设计本质是属于 内核编程范畴的， linux 驱动程序设计本质是属于 linux 内核编程范畴的， 因而是对 linux 内核和内核编程是 有要求的。 内核的组成， 有要求的。在学习前 要想了解 linux 内核的组成，因为每一部分要详细研究的话足够可以 扩展成一本厚书。 扩展成一本厚书。 另外推荐去各大书店图书馆看一下华清远见出版的畅销嵌入式专业图书， 另外推荐去各大书店图书馆看一下华清远见出版的畅销嵌入式专业图书，相信一定对 会有 帮助的。 帮助的。
    语言， 编程不同的就是， 嵌入式编程用的最多的也是 C 语言，和普通的 windows 下的 C 编程不同的就是，比如应用 层开发， 上的，而是目标板。 层开发，嵌入式开发出来的应用程序最终不是要运行在 PC 上的，而是目标板。所以嵌入式 开发就一定会有交叉编译这个环节（简单一点理解就是， 下编程， 然后交叉编译一下， 开发就一定会有交叉编译这个环节 简单一点理解就是， PC 下编程， （ 在 然后交叉编译一下， 外的其他平台上， 开发板什么的） 让程序能运行在 PC 外的其他平台上，比如 ARM 开发板什么的）
    普通编程开发=====CPU（比如奔腾） 普通编程开发=====CPU（比如奔腾）=====windows 操作系统 =====CPU 嵌入式开发===== =====嵌入式处理器 ARM） =====嵌入式操作系统 linux、 wince、 嵌入式开发=====嵌入式处理器 比如 ARM） （ =====嵌入式操作系统 比如嵌入式 linux、 （ wince、 vxworks 等） 操作系统， PC 上如果没有 windows 操作系统，那它就是一个 DOS 机 嵌入式开发中如果没有嵌入式操作系统，那它就是通常所说的单片机开发， 嵌入式开发中如果没有嵌入式操作系统，那它就是通常所说的单片机开发，嵌入式开发最 初就是从单片机开发走过来的。 初就是从单片机开发走过来的。 现在所说的嵌入式开发，通常都是指有嵌入式操作系统的那种， 品功能复杂了， 现在所说的嵌入式开发，通常都是指有嵌入式操作系统的那种，产品功能复杂了，单片机 开发无法实现，需要用到嵌入式操作系统，也能体现出嵌入式操作系统的优势。 开发无法实现，需要用到嵌入式操作系统，也能体现出嵌入式操作系统的优势。
    第一，学硬件还是软件，首先要看你的兴趣，不管是哪一个只要你搞精了， 第一，学硬件还是软件，首先要看你的兴趣，不管是哪一个只要你搞精了，都很不错 第二，目前嵌入式系统里， 80%以上的市场份额 以上的市场份额， 体系架构是必须学习， 第二，目前嵌入式系统里，ARM 占 80%以上的市场份额，所以 ARM 体系架构是必须学习，当 之前， 然学 ARM 之前， 你至少要掌握以下几门课程： 你至少要掌握以下几门课程： 1. 微机原理与接口技术 2. C 语言 3. 数字电路 有了这些基础知识才能考虑软件或者硬件的问题。 有了这些基础知识才能考虑软件或者硬件的问题。 第三，想搞嵌入式软件的话，至少要精通一种以上的嵌入式操作系统， 第三，想搞嵌入式软件的话，至少要精通一种以上的嵌入式操作系统，近来 Linux 在嵌入 式领域里相当热门， 式领域里相当热门， 1. 操作系统原理 2. 编译原理 3. Linux 必须掌握好 ARM 的学习和开发都需要学习哪些软件 总结起来最主要的有以下几个吧 1 ADS 调试用 ADS+AXD。 AXD。 支持了， 确切的说是 ADS+AXD。 ADS 里包含 AXD。原来都用 SDT 后来 ARM 公司停止对 SDT 支持了， 改支持 ADS 了，还是用 ADS 吧。 版本的， 有的人的程序发布的仍然是 SDT 版本的，但基本都可以找到相应 ADS 的，新人在这里 不要发蒙。 是编译器， 是调试器。 里调试。 不要发蒙。ADS 是编译器，AXD 是调试器。编译成 AXF 以后再在 ARM 的 RAM 里调试。 2 PLASHPGM 烧写的软件。 里调试，掉电就没有了，方便程序修改。 FLASH 烧写的软件。AXD 在 RAM 里调试，掉电就没有了，方便程序修改。调试好的程序 上电直接运行。 再下到 FLASH 里，上电直接运行。 同类的软件还有很多， 了都是， 最好， 同类的软件还有很多，什么 FLUTED 了、FLSHP 了都是，但 FLASHPGM 最好，要是有人还 使用了。 问 FLASH 不支持 BIN 格式文件的问题就要看我写的 PLASHPGM 使用了。 调试代理（不知道名对不，起这么个难记的，我一般都叫它“半羊” 3 BANYANT 调试代理（不知道名对不，起这么个难记的，我一般都叫它“半羊”因为知 道它那几天刚吃了烤羊） 道它那几天刚吃了烤羊） JTAG（ 宜啊） 调试代理就是用它帮你使用更简单的 JTAG（便宜啊）来实现原本 1K 才卖的 JTAG 仿真
    器的大部分功能。 JTAG 调试原理看我另一篇笔记。 调试原理看我另一篇笔记。 器的大部分功能。 简单的就可以把他理解为你自己做的 JTAG 的驱动就行了。 的驱动就行了。 调试代理还有很多种， 不知道具体叫什么， 调试代理还有很多种，什么 H-JTAG 了、ARM7 了（不知道具体叫什么，就记得可执行文 ARM7.EXE）都是， 比较好。 件叫 ARM7.EXE）都是，BANYANT 比较好。 需要注意的是，每种调试代理安装方法虽然都简单但都不一样，需要看说明。 需要注意的是，每种调试代理安装方法虽然都简单但都不一样，需要看说明。而且 AXD 调试之前都要运行。省钱了，就别怕麻烦了。 调试之前都要运行。省钱了，就别怕麻烦了。 ARM-ELF4 ARM-ELF-TOOLS 工具链 ARM-ELF只类的。 里面是 UCLINUX 开发用的工具比如 ARM-ELF-GCC 只类的。工具链就是把很多工具打包 在一起发布的方便你开发的东西。具体安装方法看我另一篇笔记。 在一起发布的方便你开发的东西。具体安装方法看我另一篇笔记。 ARM-LINUX-TOOLS，不一样，不通用。 另外如果你开发 LINUX 就要用 ARM-LINUX-TOOLS，不一样，不通用。 U5 U-BOOT 生成工具， VIVI（名字很暧昧~~ ~~） 大名鼎鼎的 BOOTLOADER 生成工具，同类的好象还有 VIVI（名字很暧昧~~） 生成的 BOOTLOADER 烧到 FLASH 里，然后就可以用 BOOTLOADER 下载 烧写其他了 UCLINUX。 BIOS。 有了 BOOTLOADER 才能下 UCLINUX。BOOTLOADER 就像电脑上的 BIOS。当然 UCOS 的不用 这个，用什么我不知道： 这个，用什么我不知道： ） 具体使用方法看我另一篇笔记吧。 最新版本是 1.1.4 具体使用方法看我另一篇笔记吧。 6 UCLINUX 包 的源码包，不用多说了吧？建议大家用现成的先体会一下，然后再自己编译， UCLINUX 的源码包，不用多说了吧？建议大家用现成的先体会一下，然后再自己编译， 裁剪。 的编辑技术上比较简单，但涉及的方面还是比较广的。 裁剪。因为单独 UCLINUX 的编辑技术上比较简单，但涉及的方面还是比较广的。 7 VMWARE 老牌的虚拟机软件， LINUX（ 上用的） ，省得你来回 老牌的虚拟机软件，在一个机器上虚拟出一个机器装 LINUX（PC 上用的） 省得你来回 ， 开关机了。 VMWARE-TOOLS，安装方法在我另一篇笔记里。 开关机了。记得装 VMWARE-TOOLS，安装方法在我另一篇笔记里。 处理器的三大特点是：耗电少功能强、 位双指令集和众多合作伙伴。 ARM 处理器的三大特点是：耗电少功能强、16 位/32 位双指令集和众多合作伙伴。 即为一款不带 微处理器，可在其上运行 本书所讨论的 S3C4510B 即为一款不带 MMU 的 ARM 微处理器，可在其上运行 uCLinux 操作系统。 操作系统。
    今天我来帮大家讲讲按键驱动，虽然文章的注解我是在网上的找，但他的注解表达了很清楚， 所以就在这里引用一下。
    开发平台：RED HAT LINUX 9（Linux 2.4.18）
    开发板：micro2440（友善之臂） （Linux 2.6.13)
    交叉编译工具：arm-linux-gcc-3.4.1

1
