c语言的操作符共有15个优先级，如下： 　　
Operators Associativity 　　
------------------------------------------------------------------ 　　
运算符 结合性 　　
------------------------------------------------------------------ 　　
() [] -> . left to right 　　
! ~ ++ -- + - * sizeof(type) right to left 　　
* / % left to right 　　
+ - left to right 　　
<< >> left to right 　　
< <= > >= left to right 　　
== != left to right 　　
& left to right 　　
^ left to right 　　
| left to right 　　
&& left to right 　　
|| left to right 　　
?: right to left 　　
= += -= *= /= %= &= ^= |= <<= >>= right to left 　　
, left to right


三个优先级
　　优先级从上到下依次递减，最上面具有最高的优先级，逗号操作符具有最低的优先级。 　　所有的优先级中，只有三个优先级是从右至左结合的，它们是单目运算符、条件运算符、赋值运算符。其它的都是从左至右结合。 　　具有最高优先级的其实并不算是真正的运算符，它们算是一类特殊的操作。()是与函数相关，[]与数组相关，而－>及.是取结构成员。 　　其次是单目运算符，所有的单目运算符具有相同的优先级，因此在我认为的 真正的运算符中它们具有最高的优先级，又由于它们都是从右至左结合的，因此*p++与*(p++)等效是毫无疑问的。

算术运算符
　　接下来是算术运算符，*、/、%的优先级当然比+、－高了。 　　移位运算符紧随其后。 　　其次的关系运算符中，< <= > >=要比 == !=高一个级别，不大好理解。 　　所有的逻辑操作符都具有不同的优先级（单目运算符除外，！和~） 　　逻辑位操作符的"与"比"或"高，而"异或"则在它们之间。 　　跟在其后的&&比||高。 　　接下来的是条件运算符，赋值运算符及逗号运算符。 　　在C语言中，只有4个运算符规定了运算方向，它们是&&、| |、条件运算符及赋值运算符。 　　&&、| |都是先计算左边表达式的值，当左边表达式的值能确定整个表达式的值时，就不再计算右边表达式的值。如 a = 0 && b; &&运算符的左边位为0，则右边表达式b就不再判断。 　　在条件运算符中。如a?b:c；先判断a的值，再根据a的值对b或c之中的一个进行求值。 　　赋值表达式则规定先对右边的表达式求值，因此使 a = b = c = 6;成为可能。

