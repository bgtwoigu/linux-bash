Q1:如果要检查一个API是否完整，首先该API必须要有函数原型、函数的功能和返回值。函数原型应该能表明该函数的返回值类型、函数名和函数的形式参数等；函数功能主要就是指这个API的函数体，或者说是实现过程；返回值应该能表明该API执行结束的结果是成功还是失败，这样调用者可以有较好的判断。

Q2:对于switch-case判断式，一方面可通过规范的编码风格进行编程，另一方面可以观察是否缺少switch, case 和 default 这三个语句，如果缺少其中任何一个，就表明该判断式存在遗漏；
对于if-else判断式，必须严格注意编码风格，将括号的配对关系标注清楚，每个else必须与离它最近的if进行配对，而if可以单独作为一个判断，这样在观察程式的时候可以更清晰；
另外还需要注意编译器的错误提示和警告信息，同样也可自己设置相应的测试程序对判断式进行单独地测试，等等。

Q3:首先在allocate之前检查指向这块内存区域的指针值，如果为空则表明已经被free，否则可以进行allocate动作，分配过程执行后应该检查返回指针，如果返回指针为空则表明内存未分配成功，这样就不需要再free；如果分配成功了，则在使用完后用free(p)进行释放。
同时可以配合相关工具的使用，如log, exception, JTAG, printk, pipe等等。

Q4:1. 设置断点然后进行单步跟踪，重点查看变量的值，特别是指针的内容，仔细观察是否存在指针越界和野指针的问题；
2. 仔细检查语句是否完整，语法是否正确，比如句尾的分号等；
3. 检查条件判断语句的配对情况是否正确，循环语句的条件是否设置合理，是否存在死循环等；
4. 检查头文件是否包含，以及库函数的使用方法是否正确等。

Q5:如果确定不是自己的issue，则应该及时转交owner，妥善沟通并详细陈述issue发生的信息：该事件发生的现象是什么，程式中调用了哪些API和interface，返回值的意义是什么；如果可以的话，也尽量将问题发生的可能原因指明出来，并与owner讨论，由于owner是对于这一块最了解的人，因此他可能会凭经验迅速做出判断，从而找到问题的所在。